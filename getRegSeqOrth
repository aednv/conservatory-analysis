
#use POSIX;
use Text::CSV;
use Data::Dumper qw(Dumper);
use List::MoreUtils qw(uniq);
use Bio::Kmer;
use Bio::AlignIO;
use Align::NW;
use String::Diff;
use List::Util qw(min max);

## use max..

use strict;
$|=1;

my $mask_seq = 0;
my $align = 0;

sub mask_low_complexity {
	my ($seq) = @_;
	
	$seq =~ s/TTTTTT/NNNNNN/g;
	$seq =~ s/AAAAAA/NNNNNN/g;
#	$seq =~ s/CCCCCC/NNNNNN/g;
#	$seq =~ s/GGGGGG/NNNNNN/g;
	return ($seq);
}
sub compareseq {
	my ($a,$b) = @_;
	if(length($a) > length($b)) {
		my $c = $a;
		$a = $b;
		$b = $c;
	}
	my @as = split //, $a;
	my @bs = split //, $b;
	my $similarity =0;
	my $i=0;
	foreach(@as) {
		if($_ eq $bs[$i] && ($_ ne "-" && $bs[$i] ne "N")) { $similarity++; }
		$i++;
	}
	return ($similarity);
}

my $payoff = { match => 4,
				mismatch => -5,
				gap_open => -8,
				gap_extend => 0 };

my $line;

if( @ARGV < 4) {
   print "getRegSeqOrth [-c all|bestorth|bestorth_group] [-trim # (30)] <genomedb> <Locus> <Start> <End>\n";
   print "Start and end cordinates are distances from the TSS (in negative values, e.g. -800 -500).\n\n";
   exit();
}
######### Load database 
open (my $genomedb, $ARGV[0]) || die "Can't open genome database file";
my $locus = $ARGV[1];
my $startpos = $ARGV[2];
my $endpos = $ARGV[3];

### Make the coordinates insensistive to order provided
if ($startpos > $endpos) {
	my $tmp = $startpos;
	$startpos = $endpos;
	$endpos = $tmp;
}


my $flank_add = 0;

my $header = <$genomedb>;

# Reference genome must always be the first on in the genome_database.txt file
my $referencegenome;
my $referenceseq;  
my $align_ref_seq;

while(my $genomeline = <$genomedb>) {
	chomp($genomeline);
	my @genomefields = split("\t", $genomeline);
#	print STERR "Starting genome..." . ($genomefields[0]) ."\n";

	
	########## Process all orthologs
	open (my $orthologfile, $genomefields[6]) || die "Can't open ortholog file " . $genomefields[6] . "\n";
	while(my $orth_line = <$orthologfile>) {
		chomp($orth_line);
		my @ortholog_fields = split(",", $orth_line);
		
		if($ortholog_fields[0] eq $locus) {
			my $curseqname = "";
			my $curseq;
			my $align_curseq;
			my $aln_score;
			open (FASTA, $genomefields[2]) || die "Can't open upstream sequence file " . $genomefields[2] . "\n";
			
			while($curseqname ne $ortholog_fields[1] & !eof(FASTA)) {
				$curseqname = <FASTA>;
				$curseq = <FASTA>;
				chomp($curseqname);
				chomp($curseq);
				$curseqname = substr($curseqname,1);
				if($genomefields[0] ne "Slycopersicum") {
					$curseq = substr($curseq, max(0,length($curseq) + $startpos-$flank_add), abs($startpos-$endpos)+$flank_add*2);
				} else {
					$curseq = substr($curseq, max(0,length($curseq) + $startpos), abs($startpos-$endpos));
				}
				if($mask_seq) {
					$curseq = mask_low_complexity($curseq);
				}
			}
			close(FASTA);
			### align the sequences
			
			########################################
			# If this is the first sequence, if it the reference sequence for the genome and all should be aligned to it
			#
			if($referencegenome eq "") {
				$referencegenome = $genomefields[0];
				$referenceseq = $curseq;
				$align_curseq = $curseq;
			} else {
				if($align) {
					my $nw = new Align::NW $referenceseq, $curseq, $payoff;
					$nw->score;
					$nw->align;
					my $al_ref = $nw->get_align;			
					my %al = %$al_ref;
						
					$align_curseq = $al{b};
					$align_curseq =~ s/ /-/g;
					$align_curseq =~ s/\./-/g;
				
					$align_ref_seq = $al{a};
					$align_ref_seq =~ s/ /-/g;
					$align_ref_seq =~ s/\./-/g;
				
					chomp($align_curseq);
				} else {
					$align_ref_seq = $referenceseq;
					$align_curseq = $curseq;
				}
				
			}
			
			print ">" . $ortholog_fields[0] . "|" . $genomefields[0] . "|" . $genomefields[1] . "|" . $ortholog_fields[1] . "|" . $startpos . "|" . $endpos . "|" . compareseq($align_ref_seq, $align_curseq) . "|" . length($curseq) . "\n" . $curseq . "\n";
			
		}
	}
}

