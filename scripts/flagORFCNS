#!/usr/bin/perl

use POSIX;
use strict;
use Text::CSV;
use Bio::AlignIO;
use Cwd 'abs_path';
use File::Basename;
my $dirname = dirname(__FILE__);

my $minORFLength=300;
my $inUpFastaFile;
my $inDownFastaFile;
my $tmpDirectory;

if(scalar @ARGV < 3) {
	print STDERR ("Usage: flagORFCNS upfastaFileName downFastaFileName tmpDirectory [minORFLength]\n\n\t\t<stdin> CNS CSV file\n\t\t<stdout> CNS CSV with flagged ORFs\n\n\n");
	exit(-1);
}

$inUpFastaFile = $ARGV[0];
$inDownFastaFile = $ARGV[1];
$tmpDirectory = $ARGV[2];

if($ARGV[3] > 0) {
	$minORFLength = $ARGV[3];
}

# read sequence of reference seq
open(my $inUpFasta, "<$inUpFastaFile") || die "ERROR: Can't find file $inUpFastaFile.\n";;
my $spname = <$inUpFasta>;
my $upseq = <$inUpFasta>;
close($inUpFasta);

open(my $inDownFasta, "<$inDownFastaFile") || die "ERROR: Can't find file $inDownFastaFile.\n";
$spname = <$inDownFasta>;
my $downseq = <$inDownFasta>;
close($inDownFasta);

chomp($upseq);
chomp($downseq);

#read CNS file
while(<STDIN>) {
	chomp;
	my @CNSfields = split ",";
	my $genename = $CNSfields[0];
	my $cnsstart = $CNSfields[1];
	my $cnslength = $CNSfields[2] - $CNSfields[1];
	my $cnsseq;
	if($CNSfields[4] eq "UP") {
		$cnsseq = substr($upseq, length($upseq) + $cnsstart, $cnslength);
	} else {
		$cnsseq = substr($downseq, $cnsstart, $cnslength);	
	}
	push @CNSfields, "NC";
	if($cnslength >= $minORFLength) {
		# generate tmp fastafile
		my $tmpFastaFileName = "$tmpDirectory" . "/CNS$genename" . "_$cnsstart.fasta.tmp";
		open (my $tmpFastaFile, ">$tmpFastaFileName");
		print $tmpFastaFile ">CNS\n$cnsseq\n";
		close($tmpFastaFile);
		
		#begin orf scan
		open my $orfscan, "$dirname" . "/ORFfinder -in $tmpFastaFileName -ml $minORFLength 2>/dev/null | ";
		if(<$orfscan>) { $CNSfields[(scalar @CNSfields)-1] = "ORF"}
		close($orfscan);
		unlink($tmpFastaFileName);
	}
	print ( (join ",", @CNSfields) . "\n"); 
}


