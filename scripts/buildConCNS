#!/usr/bin/perl
use strict;
use Bio::AlignIO;
use POSIX;
use Getopt::Long;
use Cwd 'abs_path';

######### Setup

my $conservatoryDir=abs_path(".");
my $CNSfileName;
my $family;
my $refGenome="";
my $flank =0;
my $verbose = 0;
my $force=0;
my $help = 0;

my $upstreamConcensus;
my $downstreamConcensus;

GetOptions ("conservatoryDirectory=s" => \$conservatoryDir,
			"family=s" => \$family,
			"CNSfile=s" => \$CNSfileName,
			"help" => \$help) or die ("Error in command line arguments\n");
			

if( $CNSfileName eq "" or $family eq "" or $help ) {
   print "Conservatory version 0.0.1\n\n";

   print "buildConCNS --family <familyName> --CNSfile <CNSfile>\n\n\nExtract CNS sequences.\n\n\n";
   print "\t--family\tFamily name (REQUIRED).\n";
   print "\t--CNSfile\t\t\tCNS CSV file (REQUIRED).\n";
   print "\t--conservatoryDirectory\t\tPath of the main conservatory directory.\n";
   print "\t--help\t\t\tPrints this message.\n\n";
   
   exit();
}
##### Set up directories
my $alignmentDir ="$conservatoryDir/alignments";

### Set up files
die "ERROR: Conservatory directory structure at ($conservatoryDir) is corrupt\n" unless (-e $alignmentDir);

open (my $CNSfile, "<$CNSfileName");
my $curlocus="";
my $CNS;
while(my $curCNSline = <$CNSfile>) {
	my ($locus,$relstart,$relend,$logpVal,$upordown) = split /,/, $curCNSline;

	if($locus ne $curlocus) {  ### read the concensus sequences
		my $upstreamFileName = $alignmentDir . "/$family/$locus.up.fasta";
		my $downstreamFileName = $alignmentDir . "/$family/$locus.down.fasta";
  		die "ERROR: Cannot find alignment files $upstreamFileName and $downstreamFileName.\n" unless ((-e $upstreamFileName) && (-e $downstreamFileName)) ;
		$downstreamConcensus = getConcensusSequence($downstreamFileName);
		$upstreamConcensus = getConcensusSequence($upstreamFileName);
		$curlocus = $locus;
	}
	if($upordown eq "UP") {
		$CNS = substr($upstreamConcensus, length($upstreamConcensus) + $relstart, $relend - $relstart);
	} else {
		$CNS = substr($downstreamConcensus, $relstart, $relend - $relstart);
	}
	print ">$locus.$upordown.$relstart\n$CNS\n";
}

close($CNSfile);

sub getConcensusSequence {
	my ($inFileName) = @_;
	
	my $in  = Bio::AlignIO->new(-file => "$inFileName" ,
        	                 -format => 'fasta');
	my $aln = $in->next_aln();
#	$aln->missing_char("N");
	$aln->gap_char('N');
	my $conc = $aln->consensus_string();
	$conc =~ tr/\?/-/;
	return($conc);
}
