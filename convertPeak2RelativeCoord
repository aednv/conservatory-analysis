#!/usr/bin/perl
use strict;
use List::Util qw(min max);


if( @ARGV < 3) {
   print "convertPeak2RelativeCoord <Peak BED file> <ProcessedGeneGffFile> <UpstreamLen> <DownstreamLen>\n";
   print "GFF file must be preprocessed and contain the CDSg type\n\n";
   exit();
}

open (my $gfffile, $ARGV[1]) || die "can't open GFF file $ARGV[1]";
my $max_prom_len = $ARGV[2];
my $max_down_len = $ARGV[3];


### returns 1 if peak is before gene, 2 if in the gene, and 3 if after the gene
###
### Parial peaks are allowed.

sub isingene {
	my ($gene_start, $gene_end, $dir, $peak_start, $peak_end) = @_;
	
	if($dir eq "+") {
		if( $peak_end < $gene_start - $max_prom_len ) { return (1); }
		 elsif($peak_end < $gene_end + $max_down_len || $peak_start < $gene_end + $max_down_len) {  return (2); } ##### ALLOW PARTIAL PEAKS
		else { return (3); }
	} else {
		if($peak_end < $gene_start - $max_down_len) { return (1); }
		elsif($peak_end < $gene_end + $max_prom_len || $peak_start < $gene_end + $max_prom_len) { return (2); } #### ALLOW PARTIAL PEAKS
		else { return (3); }
	}
}

sub print_adjusted_peak {
	my ($genename, $gene_start, $gene_end, $dir, $peak_name, $peak_start, $peak_end, $peak_num) = @_;
	
	if($dir eq "+") {
		print "$genename" . "\tpeak" . $peak_start . "\t" .  ($peak_start - $gene_start) . "\t" . ($peak_end - $gene_start) . "\t" . $peak_name . "\t" . abs($gene_end-$gene_start) . "\n";
  	} else {
		print "$genename" . "\tpeak" . $peak_start . "\t" .  ($gene_end - $peak_end) . "\t" . ($gene_end - $peak_start) . "\t" . $peak_name . "\t" . abs($gene_end-$gene_start) . "\n";
  	}
  	return 0;
}


while(my $gffline = <$gfffile>)
{
  if(substr($gffline, 1,1) ne "#") {
  	chomp($_);
  	
	my @genefields = split(/\t/, $gffline);
	
	if($genefields[2] eq "CDSg") {
	
  		my %geneinfo = split /[;=]/, $genefields[8];
  		my $genename = $geneinfo{"Name"};
  		chomp($genename);
  		my $chromosome = $genefields[0];
  		my $start = $genefields[3];
  		my $end = $genefields[4];
  		my $dir = $genefields[6];
  			
  		# now read peaks
  		open (my $peakfile, $ARGV[0]) || die "can`t open BED file $ARGV[0]";
  		my $curpeakline = <$peakfile>;
  		my @peakfields = split ' ', $curpeakline;
  		# get to chromosome
  		while ($peakfields[0] ne $chromosome) {
  			$curpeakline = <$peakfile>;
  			@peakfields = split ' ', $curpeakline;
  		}
  		#now get to gene
  				
  		while (isingene($start, $end, $dir, $peakfields[1], $peakfields[2])<3 && !eof($peakfile)) { 
  				
  			if($peakfields[0] eq $chromosome && isingene($start, $end, $dir, $peakfields[1], $peakfields[2]) == 2) {
  				print_adjusted_peak($genename, $start, $end, $dir,  $peakfields[3], $peakfields[1], $peakfields[2],0);
  			}
  			$curpeakline = <$peakfile>;
  			@peakfields = split ' ', $curpeakline;
  		}
 		close($peakfile);
  	}
  }
}
