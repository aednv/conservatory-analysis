#!/usr/bin/perl

use strict;
use Bio::AlignIO;
use POSIX;
use Getopt::Long;
use Cwd;
$!=1;



############################################################################################
####
#### Get Up and downstream sequences
####
####   getControlSequences(genomeDatabase, locus)
####
####

sub getControlSequences {
	my ($genomeDatabase, $locus) = @_;
	
	open(my $genomeDatabaseFile, $genomeDatabase) || die("Can't open file " . $genomeDatabase . "\n");
	my $line = <$genomeDatabaseFile>; # Skip header
	my $line = <$genomeDatabaseFile>; # read reference species
	my @fields = split /,/, $line;
	my $upstreamFileName = %ENV{CONUNPE} . "../allgenomes/" . $fields[6];
	my $downstreamFileName = %ENV{CONUNPE} . "../allgenomes/" . $fields[10];
	my $referenceSpecies = $fields[1];
	close($genomeDatabaseFile);
	
	open(my $upstreamFile, $upstreamFileName) || die("Can't open file " . $upstreamFileName . "\n");

	my $upstreamSeq;
	while(($line = <$upstreamFile>) && $upstreamSeq eq "") {
		chomp($line);
		my $geneName = substr($line,1);
		$line = <$upstreamFile>;
		if($geneName eq $locus) {
			chomp($line);
			$upstreamSeq = $line;
		}
	}
	close($upstreamFile);

	open(my $downstreamFile, $downstreamFileName) || die("Can't open file " . $downstreamFileName . "\n");
	my $downstreamSeq;
	while(($line = <$downstreamFile>) && $downstreamSeq eq "") {
		chomp($line);
		my $geneName = substr($line,1);
		$line = <$downstreamFile>;
		if($geneName eq $locus) {
			chomp($line);
			$downstreamSeq = $line;
		}
	}

	close($downstreamFile);
	die("Can't find gene " . $locus . "\n") unless ($upstreamSeq ne "" || $downstreamSeq ne "");
	return ($upstreamSeq, $downstreamSeq, $referenceSpecies);
}


###########################################################################################################################
###########################################################################################################################
###########################################################################################################################
###########################################################################################################################
###########################################################################################################################




#### SETUP

my $locus;
my $genomeDatabase;
my $seqType = "reference";
my $nolowcomplexityfilter = 0;
my $flank =0;

GetOptions("genomeDatabase=s" => \$genomeDatabase,
		   "locus=s" => \$locus,
		   "type=s" => \$seqType,
		   "flank=i" => \$flank,
		   "nolowcomplexityfilter" => \$nolowcomplexityfilter) or die ("Error in command line arguments\n");
		   
if ($locus eq "" || $genomeDatabase eq "") {
	print "makeCorePromoter --genomeDatabase <genomeDatabase> --locus <locus>  --type [ref(erence)|con(census)|all] --flank <# of flanking bp from each CNS> --nolowcomplexityfilter\n\n";
	exit();
}

if(%ENV{CONUNPE} eq "") {
	print "conUnPE directory is not defined in the variable CONUNPE. \n";
	exit();
} 

#### Get Control Sequneces

my ($upstreamSeq, $downstreamSeq, $referenceSpecies) = getControlSequences($genomeDatabase, $locus);

#### get conservation data
my $conservationFileName;

$conservationFileName = %ENV{CONUNPE} . "../phyloP/CNS/" . $locus . "_CNS.bed";

my $mafFileName = %ENV{CONUNPE} . "../genes/" . $locus . ".maf";

##### get MAF file for concensus 
if($seqType eq "con") {

	my $maffile = Bio::AlignIO->new(-file => $mafFileName,
							    	-format => "maf");

	while(my $aln = $maffile->next_aln) {
		my $conces = uc($aln->consensus_string());
	    substr($upstreamSeq, $aln->get_seq_by_id($locus)->start(), $aln->get_seq_by_id($locus)->length()) = $conces;
    }
}    

#### dump Core promoter
open(my $conservationFile, $conservationFileName) || die ("Can't find conservation data for locus $locus in file $conservationFileName");
my $corePromoterName = ">" . $referenceSpecies;
my $corePromoter = "";

while(my $line = <$conservationFile>) {
	chomp($line);
	my @confields = split /\t/, $line;
	if($corePromoter ne "") { $corePromoter .= ('X' x 10); }
	$corePromoterName = $corePromoterName . ":" . $confields[1] . "," . (length($corePromoter)+1) . "," .  ($confields[2] - $confields[1] +1) . "," . $confields[3];
	$corePromoter = $corePromoter . substr($upstreamSeq, $confields[1] - $flank,  $confields[2] - $confields[1] +1 + $flank*2);
}

###### Filter low complexity regions
######

if(!$nolowcomplexityfilter) { $corePromoter =~ s/[A|T]{7}/XXXXXXX/g; }

print $corePromoterName . "\n" . $corePromoter . "\n";

