#!/usr/bin/perl
use Bio::Tools::Run::Alignment::Clustalw;
use warnings;
use strict;
$|=1;

=begin
 This script reads a list of orthologs and based on the genome database, output a fasta of all fourfold codons in the genes 
 usage: extractFourFoldSites codons orthologs genomedatabase
=cut

### file information is passed via command line
my $codonfile = $ARGV[0];
my $orthologfile = $ARGV[1]; 
my $genomedatabasefile = $ARGV[2];


#### set up clulstaw

my @params = ('ktuple' =>2, 'matrix' => 'BLOSUM', quiet => 1);
my $factory = Bio::Tools::Run::Alignment::Clustalw->new(@params);

### read in set of 4d degenerate codons
my %codon;
my %aa;
open CODON, "<" . $codonfile || die ("Can't open codon file " . $codonfile . "\n");
while(<CODON>) { 
	chomp $_ ;
	my @consp = split("\t", $_);
	$codon{$consp[1]}++;
	$aa{$consp[0]}++;
}
close CODON ; 

## Read all the cds and protein into memory. because why not.
my %cds;
my %protein;

#first read the genomes.
open my $orthologs, "<" . $orthologfile;
my @genomes = split(",", <$orthologs>);
foreach my $curgenome  (@genomes) {
	chomp $curgenome;
	print STDERR $curgenome . ":";

	# identify all the cds files.
	open my $genomedb, "<$genomedatabasefile";
	while(my $curdbline = <$genomedb>) {
		chomp ($curdbline);
		my @dblinefields = split(",", $curdbline);
		if ($dblinefields[2] eq $curgenome) {
			if(defined $dblinefields[11]) {
				### Load cds.
				print STDERR ($dblinefields[11] . ",");
				open my $curcdsfile, ("<" . "../allgenomes/" . $dblinefields[11]) || die ("Can't open CDS file " . $dblinefields[11] . "\n");
				my $curcds = "";
				while(my $curcdsline = <$curcdsfile>) {
					chomp $curcdsline;
					if(substr($curcdsline,0,1) eq ">") {
						$curcds = substr $curcdsline,1;
						$curcds =~ s/[ |\t]+.*//;
						if ($curgenome eq "Slycoperscoides" || $curgenome eq "Jsinuosa") {
							$curcds =~ s/\.[0-9]$//;
						}
						if ($curgenome eq "Spennellii") {
							$curcds =~ s/\.t[0-9]$//;
						}
						$curcds =~ s/\.[0-9]$//;
						$curcds =~ s/\.[0-4][0-9]$//;
						$curcds =~ s/\./_/g;
						if($curgenome eq "Gmax") {
							$curcds = "glyma_Wm82_gnm4_ann1_" . $curcds;
						}
						$cds{$curgenome}{"$curcds"}="";
					} else {
						$cds{$curgenome}{"$curcds"} .= $curcdsline;
					}
				}
				close $curcdsfile;

				print STDERR ($dblinefields[8] . ",");
				open my $curproteinfile, ("<" . "../allgenomes/" . $dblinefields[8]) || die ("Can't open Protein file " . $dblinefields[8] . "\n");
				my $curprotein = "";
				while(my $curproteinline = <$curproteinfile>) {
					chomp $curproteinline;
					if(substr($curproteinline,0,1) eq ">") {
						$curprotein = substr $curproteinline,1;
						$curprotein =~ s/[ |\t]+.*//;
						if ($curgenome eq "Slycoperscoides" || $curgenome eq "Ahypogaea") {
							$curprotein =~ s/\.[0-9]$//;
						}
						if ($curgenome eq "Spennellii") {
							$curprotein =~ s/\.t[0-9]$//;
						}
						$curprotein =~ s/\.p$//;
						$curprotein =~ s/\.[0-9]$//;
						$curprotein =~ s/\.[0-4][0-9]$//;

						$curprotein =~ s/\./_/g;
						$protein{$curgenome}{"$curprotein"}="";
						
					} else {
						# remove stop sign
						$curproteinline =~ s/\*//;
						$protein{$curgenome}{"$curprotein"} .= $curproteinline;
					}
				}
				close $curproteinfile;
			}
		}
	}
	close $genomedb;
	print STDERR "\n";
	
}


# align and output just the fourfold nucleotides
my @protseqs;
my %cdsseqs;

my %fourfold_aln;

foreach my $curgenome (@genomes) {
	$fourfold_aln{$curgenome} = "";
}


while(my $curorthset = <$orthologs>) {
	chomp $curorthset;
	my @orthset = split("," , $curorthset);
	# check to see if we have CDS for orthologs
	my $hasallcds = 1;
	for(my $i=0; $i< scalar @orthset; $i++) {
		my $curorth = $orthset[$i];
		$curorth =~ s/\./_/g;

		if(!(defined $cds{$genomes[$i]}{"$curorth"}) || !(defined $protein{$genomes[$i]}{"$curorth"})) {
			print STDERR "Ouch. Can't find $curorth in $genomes[$i].";
#			if( defined $cds{$genomes[$i]}{"$curorth"}) { print "Found CDS"; };
#			if( defined $protein{$genomes[$i]}{"$curorth"}) { print "Found Protein"; };
#						print "\n";
			$hasallcds=0;
		} else {
			# sanity check - see if the CDS mathes the translation. sometimes it doesn't....
			# first, make sure the CDS has the stop codon

			my $lastcodon = substr $cds{$genomes[$i]}{"$curorth"}, -3;
			if(!($lastcodon eq "TAA" || $lastcodon eq "TAG" || $lastcodon eq "TGA")) {
				$cds{$genomes[$i]}{"$orthset[$i]"} .= "TAA";
			}
			
			if(length($protein{$genomes[$i]}{"$curorth"})*3 != length($cds{$genomes[$i]}{"$curorth"})-3) {
				$hasallcds=0;
				
#				print("..but a bad one. Length of protein is (" . length($protein{$genomes[$i]}{"$curorth"}) . ") and CDS is (" . (length($cds{$genomes[$i]}{"$curorth"})-3) . ")"  );
				
			}
#			print "\n";

		}
	}
	
	if($hasallcds) {
		print STDERR ".";
		for(my $i=0; $i< scalar @orthset; $i++) {
			my $curorth = $orthset[$i];
			$curorth =~ s/\./_/g;
			if(defined $protein{$genomes[$i]}{"$curorth"}) {
				# filter just the relevant aa.
				
				my $seq = Bio::Seq->new( -display_id => $genomes[$i],
										 -seq => $protein{$genomes[$i]}{"$curorth"});
				$protseqs[$i] = $seq;
				
				$cdsseqs{$genomes[$i]} = $cds{$genomes[$i]}{"$curorth"};
			}
		}
		
		my $protseq_ref = \@protseqs;
		
		my $protaln = $factory->align($protseq_ref);
		my @varaa = keys %aa;
		my $searchstring =  "[" . join("|", @varaa) . "]";

	
		foreach my $seq ($protaln->each_seq) {
			my $seqseq = $seq->seq();

			my $curcds = $cdsseqs{$seq->id()};

			my $fourfold = "-" x length($seqseq);

			while($seqseq=~m/$searchstring/g) {
				my $pos = ($-[0]);
				# translate position in alignment to position in CDS
				my $upseq = substr($seqseq, 0, $pos);
				my $spacecount = $upseq =~ tr/\.//;
				
				my $curcodon = substr($curcds, ($pos-$spacecount)*3  ,3);
				if(defined $codon{$curcodon}) {
					substr($fourfold, $pos, 1) = substr($curcodon,2,1);
				}
			}
#			$fourfold_aln{$seq->id()} .= $fourfold;		
			$fourfold_aln{$seq->id()} .= $seqseq;		
		}
	}
}

### sanity check
#foreach my $curgenome (@genomes) {
#	print ">" . $curgenome . "\n" . length($fourfold_aln{$curgenome}) . "\n";
#}


foreach my $curgenome (@genomes) {
	print ">" . $curgenome . "\n" . $fourfold_aln{$curgenome} . "\n";
}



