#!/usr/bin/perl
use POSIX;
use strict;
use Getopt::Long;
use Cwd 'abs_path';
use threads;
use threads::shared;
my $threadlock:shared;

###########

my $conservatoryDir=abs_path(".");
my $genome="";
my $family;
my $force=0;
my $verbose=0;
my $help=0;
my $genomeWasProcessed=0;
my $threads=16;
my $version=2;

my $skipAlignment=0;
my $skipConservation=0;
my $minIdentity=0;
my $minSpeciesNum= -1;
my $minPhyloPscore=0;

GetOptions ("conservatoryDirectory=s" => \$conservatoryDir,
			"family=s" => \$family,
			"threads=i" => \$threads,
			"version=i" => \$version,
			"min-identity=i" => \$minIdentity,
			"min-species=i" => \$minSpeciesNum,
			"min-phylop-score=f" => \$minPhyloPscore,
			"skip-alignment" => \$skipAlignment,
			"skip-conservation" => \$skipConservation,
			"force" => \$force,
			"verbose" => \$verbose,
			"help" => \$help) or die("Error in command line arguments\n");

			
if($help || $family eq "" || ($version != 1 && $version !=2)) {
	print "Conservatory version 0.0.1\n\n";
	
	print "processConservation --family <family>\n\n";
	print "\t--conservatoryDirectory\tPath of the main conservatory directory. See README for directory structure. (DEFAULT: current directory)\n";
	print "\t--family\t\tFamily for which to process conservation (REQUIRED).\n";
	print "\t--min-identity\t\tMinimum identity for LASTZ alignments.\n";
	print "\t--min-species\t\tMinimum number of species share sequence for an alignment to be considered for CNS.\n";
	print "\t--min-phylop-score\t\tMinimum phyloP score to consider as significant CNS.\n";
	print "\t--version\t\tVersion of aligner to use (1 or 2; DEFAULT 2)\n";	
	print "\t--skip-alignmnet\t\tSkip the alignment step.\n";
	print "\t--skip-conservation\t\tSkip phyloP conservation calculation step.\n";
	print "\t--force\t\tForce rebuilding alignments.\n";
	print "\t--threads\t\tNumber of threads to use.\n";
	print "\t--verbose\t\tOutput extra progress messages.\n";
	print "\t--help\t\t\tPrints this message.\n\n";
	exit(0);
}

#################### Set up files
my $genomedb_file = "$conservatoryDir/genome_database.csv";
my $outputDir = "$conservatoryDir/alignments/$family";
my $conservationDir = "$conservatoryDir/CNS";
my $alignmentDir = "$conservatoryDir/alignments";
my $genomesDir = "$conservatoryDir/genomes";
my $geneListFileName;

####### First, sanity checks. Check to see if blast is installed and if directory structure is OK.
####### 
die "ERROR: Cannot find file genome database file ($genomedb_file)\n" unless -e $genomedb_file;
die "ERROR: Conservatory directory structure at ($conservatoryDir) is corrupt\n" unless (-e "$conservatoryDir/genomes" && -e "$conservatoryDir/genomes/blastdb/" && -e "$conservatoryDir/scripts" && -e "$conservatoryDir/alignments");

my $samtools = `sh -c 'command -v samtools'`;
die "ERROR: Cannot find samtools in path. Please make sure it is installed.\n" unless ($samtools ne "");  

### Clear old locks
system("rm $outputDir/*.lock");

######## Read genome database file.
	
open(my $genomedb, "<", $genomedb_file);
my $header=<$genomedb>;
while(my $curgenomeline= <$genomedb>) {
	my ($curgenomeName, $curgenomeSpecies,  $curgenomeFamily, $curgenomeReference) = split /,/, $curgenomeline;

	if($family eq $curgenomeFamily && $curgenomeName eq $curgenomeReference) {
		$genomeWasProcessed=1;
		
		#### First, genome sanity check. See that we have all files.
		print localtime() . ": START processing conservation for $family (reference genome $curgenomeName)\n";
		$geneListFileName = "$conservatoryDir/genomes/$curgenomeFamily/$curgenomeName.footprint.gff3";
		die localtime() . ": ABORT Cannot find footprint file ($geneListFileName). Was processGenomes run?\n" unless -e $geneListFileName;
		### Start threads
		if(!($skipAlignment && $skipConservation)) {
			my @alignmentThreads = map { threads->new(\&processAlignmentThread, $_) } 1 .. $threads;
			$_->join for @alignmentThreads;
		}
		## Merge all BAM, sort and index
		unlink("$alignmentDir/$family.bam");
		system("find $outputDir -name \"*.bam\" > $outputDir/$family.bams.txt");
		system("ulimit -n 200000; samtools merge -b  $outputDir/$family.bams.txt $alignmentDir/$family.tmp.bam");
		unlink("$outputDir/$family.bams.txt");
		
		system("samtools sort $alignmentDir/$family.tmp.bam > $alignmentDir/$family.sort.bam");
		unlink("$alignmentDir/$family.tmp.bam");

		# Mark snps and indels
		system("samtools calmd -@ $threads -b $alignmentDir/$family.sort.bam $conservatoryDir/genomes/$curgenomeFamily/$curgenomeReference.fasta.gz > $alignmentDir/$family.bam");
		unlink("$alignmentDir/$family.sort.bam");
		system("samtools index $alignmentDir/$family.bam");
			
		##### Now merge conservation data
		unlink("$conservationDir/$family.csv");
		unlink("$conservationDir/$family.bed");
		unlink("$conservationDir/$family.bw");
		
		# merge gene files for entire genome
		system("for a in $conservationDir/$family/*.csv; do cat \$a >> $conservationDir/$family.csv; done");
		system("for a in $conservationDir/$family/*.bed; do cat \$a | sed 's/ /\t/g' >> $conservationDir/$family.bed; done");
		
		# sort files
		system("sort -k1,1 -k2,2n -o $conservationDir/$family.csv $conservationDir/$family.csv");
		system("sort -k1,1 -k2,2n -u -o $conservationDir/$family.bed $conservationDir/$family.bed");

		# Make nice output files. BW for the phylop track and GFF for the CNS
		system("$conservatoryDir/scripts/bedGraphToBigWig $conservationDir/$family.bed $genomesDir/$curgenomeFamily/$curgenomeReference.chrom.size $conservationDir/$family.bw");
		

		print localtime() . ": END processing conservation for $family (reference genome $curgenomeName)\n";
	}
}
close($genomedb);

if(! $genomeWasProcessed) { die ("ERROR: No family $family or no reference genome was found in $genomedb_file.\n"); }

print localtime() . ": END conservation processing run.\n";

sub processAlignmentThread {
	my $goodtogo=0;
	my ($threadnumber) = @_;
	print localtime() . ": OPEN thread $threadnumber.\n";
	my @locks;

	open(my $geneListFile, "<", $geneListFileName);
	while(my $geneline = <$geneListFile>) {
		my $curLocus;
		if (1) {
	   	  lock $threadlock;
	   	  chomp $geneline;
	   	  my @array = split /\t/, $geneline;
	   	  my %geneparam = split/[;=]/, $array[8];
	   	  
	   	  ($curLocus) = $geneparam{'Name'};
	   	  if(!( -e "$outputDir/$curLocus.lock")) {
			open(my $lock, ">","$outputDir/$curLocus.lock");
			close($lock);
			print localtime() . ": Thread $threadnumber is processing $curLocus.\n";
			push @locks, "$outputDir/$curLocus.lock";
			$goodtogo=1;
		  }
		}
		if($goodtogo) {
	   		my $alignmentParams = "--family $family --locus $curLocus --dump-bam";
	   		if($minIdentity>0) { $alignmentParams .= " --min-identity $minIdentity"; }
	   		if($minSpeciesNum>=0) { $alignmentParams .= " --min-species $minSpeciesNum"; }
	   		if($minPhyloPscore>0) { $alignmentParams .= " --min-phylop-score $minPhyloPscore"; }   		
	   		if($force) { $alignmentParams .= " --force"; }
	   		if($skipAlignment) { $alignmentParams .= " --skip-alignment"; }
	   		if($skipConservation) { $alignmentParams .= " --skip-conservation"; }
	   		system("$conservatoryDir/scripts/buildConservationForFamily$version $alignmentParams");
			$goodtogo=0;
		} 
	}
	#remove all locks.
	foreach my $lockToDelete (@locks) {
		unlink($lockToDelete);
	}

	close($geneListFile);
	print localtime() . ": CLOSE thread $threadnumber.\n";
}
